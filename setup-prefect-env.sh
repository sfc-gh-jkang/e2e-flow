#!/bin/bash

# Prefect Environment Setup Script
# This script helps you configure Prefect credentials for local development

set -e

echo "üîß Prefect Environment Setup for E2E Flow"
echo "=========================================="
echo ""

# Check if uv is installed
if ! command -v uv &> /dev/null; then
    echo "‚ùå UV not found."
    echo ""
    echo "Install UV with:"
    echo "  curl -LsSf https://astral.sh/uv/install.sh | sh"
    exit 1
fi

echo "‚úÖ UV found"
echo ""

# Check if already logged in
echo "üì° Checking Prefect Cloud connection..."
API_URL=$(uv run prefect config view --show-sources 2>/dev/null | grep "PREFECT_API_URL" | awk -F"'" '{print $2}' || echo "")

if [ -n "$API_URL" ] && [ "$API_URL" != "None" ] && [ "$API_URL" != "null" ]; then
    echo "‚úÖ Already logged in to Prefect Cloud"
    echo "   API URL: $API_URL"
    echo ""
    read -p "Use this configuration? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        API_URL=""
    fi
fi

# Login if needed
if [ -z "$API_URL" ] || [ "$API_URL" = "None" ] || [ "$API_URL" = "null" ]; then
    echo "üîê Please log in to Prefect Cloud"
    echo ""
    echo "You can get your API key from:"
    echo "  https://app.prefect.cloud ‚Üí Settings ‚Üí API Keys"
    echo ""
    read -p "Enter your Prefect API key (starts with pnu_): " API_KEY
    
    if [ -z "$API_KEY" ]; then
        echo "‚ùå API key required"
        exit 1
    fi
    
    # Login to Prefect Cloud
    echo ""
    echo "üîê Logging in to Prefect Cloud..."
    uv run prefect cloud login -k "$API_KEY"
    
    # Get API URL after login
    API_URL=$(uv run prefect config view --show-sources 2>/dev/null | grep "PREFECT_API_URL" | awk -F"'" '{print $2}')
    
    echo ""
    echo "‚úÖ Successfully logged in!"
else
    # Need to get API key from user
    echo ""
    echo "üîë API Key needed"
    echo ""
    read -p "Enter your Prefect API key (starts with pnu_): " API_KEY
    
    if [ -z "$API_KEY" ]; then
        echo "‚ùå API key required"
        exit 1
    fi
fi

# Validate we have both values
if [ -z "$API_URL" ] || [ "$API_URL" = "None" ] || [ "$API_URL" = "null" ]; then
    echo "‚ùå Failed to get API URL"
    exit 1
fi

# Create .env file
echo ""
echo "üìù Creating .env file..."

cat > .env << EOF
# Prefect Cloud Configuration
# Generated by setup-prefect-env.sh on $(date)
PREFECT_API_URL=$API_URL
PREFECT_API_KEY=$API_KEY
PREFECT_WORK_POOL=spcs-process

# Application Settings
PYTHONUNBUFFERED=1
APP_PORT=8080
LOG_LEVEL=INFO
EOF

echo "‚úÖ Created .env file"
echo ""
echo "üìã Configuration:"
echo "   API URL: $API_URL"
echo "   API Key: ${API_KEY:0:10}***"
echo ""

# Test connection
echo "üß™ Testing Prefect Cloud connection..."
if uv run prefect cloud workspace get &> /dev/null; then
    WORKSPACE=$(uv run prefect cloud workspace get 2>/dev/null | grep -oP '"workspace_handle":\s*"\K[^"]+' || echo "unknown")
    echo "‚úÖ Connection successful!"
    echo "   Workspace: $WORKSPACE"
else
    echo "‚ö†Ô∏è  Warning: Could not verify connection to Prefect Cloud"
fi

echo ""
echo "=========================================="
echo "üéâ Setup complete!"
echo ""
echo "Next steps:"
echo "  1. Test locally:"
echo "     docker-compose up --build"
echo ""
echo "  2. Deploy to Snowflake SPCS:"
echo "     ./deploy.sh"
echo ""
echo "  3. Create work pool in Prefect Cloud:"
echo "     uv run prefect work-pool create spcs-process --type process"
echo ""
echo "  4. Configure SPCS service with:"
echo "     snow sql -c default << 'EOF'"
echo "     ALTER SERVICE E2E_FLOW_DB.APP_SCHEMA.E2E_FLOW_SERVICE SET"
echo "       PREFECT_API_URL = '$API_URL';"
echo "     ALTER SERVICE E2E_FLOW_DB.APP_SCHEMA.E2E_FLOW_SERVICE SET"
echo "       PREFECT_API_KEY = '$API_KEY';"
echo "     ALTER SERVICE E2E_FLOW_DB.APP_SCHEMA.E2E_FLOW_SERVICE SET"
echo "       PREFECT_WORK_POOL = 'spcs-process';"
echo "     ALTER SERVICE E2E_FLOW_DB.APP_SCHEMA.E2E_FLOW_SERVICE SUSPEND;"
echo "     ALTER SERVICE E2E_FLOW_DB.APP_SCHEMA.E2E_FLOW_SERVICE RESUME;"
echo "     EOF"
echo ""
echo "üìö For more information, see:"
echo "   - docs/PREFECT_AUTH.md"
echo "   - docs/PREFECT_SETUP.md"
echo "   - docs/GET_PREFECT_URL.md"

